<?xml version="1.0" encoding="UTF-8"?>
<Configurations xmlns:xpp="http://q37.info/ns/xpp/">
 <Configuration target="xdhqxdh">
  <Parameters>
   <Language>en</Language>
   <Command>Test</Command>
   <FaaS>
    <Service>53700</Service>
   </FaaS>
   <Plugins/>
  </Parameters>
  <Definitions>
   <FaaS>
    <URL>http://%Address%%Service%/xdh.php?_token=%Token%</URL>
    <Notification><![CDATA[
****************************************************************************
     Your application is connected to the free public server. Welcome!
     THIS SERVICE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED. THE USE OF THIS SERVICE IS AT YOUR OWN RISK.
****************************************************************************
                    ]]>    </Notification>
   </FaaS>
   <Plugins target="Token">
    <Plugin id="Forbidden">
     <Filename>/home/csimon/bin/plugins/xdhq/proxy/token/Forbidden/forbidden</Filename>
     <Configuration>
      <Parameters>
       <Command>Default</Command>
      </Parameters>
      <Arguments/>
     </Configuration>
     <Locale/>
    </Plugin>
   </Plugins>
   <Scripts>
    <Script name="@SetEventHandlers_1" Arguments="#Ids,#Events"><![CDATA[
{
  setEventHandlers( %#Ids%, %#Events% );
}
        ]]>    </Script>
    <Script name="@InstantiateWidgets_1" Arguments="#Ids,#Types,#ParametersSets,#ContentRetrievingMethods,#FocusingMethods,#SelectionMethods"><![CDATA[
{
  instantiateWidgets( %#Ids%, %#Types%, %#ParametersSets%, %#ContentRetrievingMethods%, %#FocusingMethods%, %#SelectionMethods% );
}
        ]]>    </Script>
    <Script name="@BroadcastAction_1" Arguments="Action,Id"><![CDATA[
{
 launchEvent('%Id%|BROADCAST|broadcast||((broadcast|%Action%))');
}
		        ]]>    </Script>
    <Script name="Execute_1" Arguments="#Script"><![CDATA[
{
  %#Script%
}
        ]]>    </Script>
    <Script name="Alert_1" Arguments="Message"><![CDATA[
{
  alert("%Message%");
  ""; // Must return a value, or one will not wait the dismissing of the dialog box.  
}
        ]]>    </Script>
    <Script name="Confirm_1" Arguments="Message"><![CDATA[
{
  if ( window.confirm("%Message%") )
    "true";
  else
    "false";
}
        ]]>    </Script>
    <Script name="HandleLayout_1" Arguments="Variant,Id,XML,XSL"><![CDATA[
{
  let xml = "%XML%";	// 'XML' is HTML if 'XSL' is empty.
  let xsl = "%XSL%";
  let id = "%Id%";
  
  log("xml: " + xml);
  
  switch ( "%Variant%" ) {
  case 'Prepend':	// Deprecated
    prependLayout(id, xml, xsl);
    break;
  case 'Set':	// Deprecated
    setLayout(id, xml, xsl);
    break;
  case 'Append':	// Deprecated
    appendLayout(id, xml, xsl);
    break;
  default:
	if ( "%Variant%" === 'inner' )
		getElement(id).innerHTML = getLayoutHTML(xml, xsl);
	else
		getElement(id).insertAdjacentHTML("%Variant%", getLayoutHTML(xml, xsl));
  }

  var digests = fetchEventHandlersAndWidgest(getElement(id).parentElement);
  digests;  // Not returned to user. Splitted and given after processing to 'SetEnventHandlers_1' and  InstantiateWidgets_1' above internal scripts.
}
        ]]>    </Script>
    <Script name="GetContents_1" Arguments="#Ids"><![CDATA[
{
  getContents(%#Ids%);
}
        ]]>    </Script>
    <Script name="SetContents_1" Arguments="#Ids,#Contents"><![CDATA[
{
  setContents( %#Ids%, %#Contents% );
}
        ]]>    </Script>
    <Script name="GetValues_1" Arguments="#Ids"><![CDATA[
{
  getValues(%#Ids%);
}
        ]]>    </Script>
    <Script name="SetValues_1" Arguments="#Ids,#Values"><![CDATA[
{
  setValues( %#Ids%, %#Values% );
}
        ]]>    </Script>
    <Script name="GetMarks_1" Arguments="#Ids"><![CDATA[
{
  getMarks(%#Ids%);
}
        ]]>    </Script>
    <Script name="SetMarks_1" Arguments="#Ids,#Marks"><![CDATA[
{
  setMarks( %#Ids%, %#Marks% );
}
        ]]>    </Script>
    <Script name="HandleClasses_1" Arguments="Variant,#Ids,#Classes"><![CDATA[
{
  switch ( "%Variant%" ) {
  case 'Add':
    addClasses(%#Ids%, %#Classes%);
    break;
  case 'Remove':
    removeClasses(%#Ids%, %#Classes%);
    break;
  case 'Toggle':
    toggleClasses(%#Ids%, %#Classes%);
    break;
  }
}
        ]]>    </Script>
    <Script name="EnableElements_1" Arguments="#Ids"><![CDATA[
{
  enableElements( %#Ids% );
}
        ]]>    </Script>
    <Script name="DisableElements_1" Arguments="#Ids"><![CDATA[
{
  disableElements( %#Ids% );
}
        ]]>    </Script>
    <Script name="SetAttribute_1" Arguments="Id,Name,Value"><![CDATA[
{
  getElement( "%Id%" ).setAttribute("%Name%", "%Value%");
}
        ]]>    </Script>
    <Script name="GetAttribute_1" Arguments="Id,Name"><![CDATA[
{
  getElement( "%Id%" ).getAttribute("%Name%");
}
        ]]>    </Script>
    <Script name="RemoveAttribute_1" Arguments="Id,Name"><![CDATA[
{
  getElement( "%Id%" ).removeAttribute( "%Name%" );
}
        ]]>    </Script>
    <Script name="SetProperty_1" Arguments="Id,#Name,#Value"><![CDATA[
{
  getElement( "%Id%" ).%#Name% = %#Value%;
}
        ]]>    </Script>
    <Script name="GetProperty_1" Arguments="Id,#Name"><![CDATA[
{
  getElement( "%Id%" ).%#Name%;
}
        ]]>    </Script>
    <Script name="Focus_1" Arguments="Id"><![CDATA[
{
  getElement( "%Id%" ).focus();
}
        ]]>    </Script>
    <Script name="Parent_1" Arguments="Id"><![CDATA[
{
  getOrGenerateId( getElement( "%Id%" ).parentElement );
}
        ]]>    </Script>
    <Script name="FirstChild_1" Arguments="Id"><![CDATA[
{
  getOrGenerateId(getElement("%Id%").firstElementChild);
}
        ]]>    </Script>
    <Script name="LastChild_1" Arguments="Id"><![CDATA[
{
  getOrGenerateId(getElement("%Id%").lastElementChild);
}
        ]]>    </Script>
    <Script name="PreviousSibling_1" Arguments="Id"><![CDATA[
{
  getOrGenerateId(getElement("%Id%").previousElementSibling);
}
        ]]>    </Script>
    <Script name="NextSibling_1" Arguments="Id"><![CDATA[
{
  getOrGenerateId(getElement("%Id%").nextElementSibling);
}
        ]]>    </Script>
    <Script name="ScrollTo_1" Arguments="Id"><![CDATA[
{
  getElement("%Id%").scrollIntoView({behavior: 'smooth', block: 'center'});
}
        ]]>    </Script>
    <Script name="Flush_1" Arguments=""><![CDATA[
{
  ""; // To wait that all pending commands were executed.
}
        ]]>    </Script>
    <Script name="" Arguments=""><![CDATA[
{

}
        ]]>    </Script>
   </Scripts>
   <TagsDefaultEvents>
    <Tag name="" Event="click"/>
    <Tag name="SELECT" Event="change"/>
    <Tag name="RANGE" Event="change"/>
    <Tag name="CHECKBOX" Event="change"/>
    <Tag name="RADIO" Event="change"/>
    <Tag name="DATE" Event="change"/>
    <Tag name="COLOR" Event="change"/>
    <Tag name="TEXT" Event="keypress" Key="Enter"/>
    <Tag name="PASSWORD" Event="keypress" Key="Enter"/>
    <Tag name="TEXTAREA" Event="keypress" Key="Enter"/>
   </TagsDefaultEvents>
  </Definitions>
  <Locale>
   <Translations text="TestCommandDescription">
    <Translation language="fr">Commande de test.</Translation>
    <Translation language="en">Test command.</Translation>
   </Translations>
   <Translations text="TestFlagDescription">
    <Translation language="fr">fanion de test.</Translation>
    <Translation language="en">test flag.</Translation>
   </Translations>
   <Translations text="TestOptionDescription">
    <Translation language="fr">option de test.</Translation>
    <Translation language="en">test option.</Translation>
   </Translations>
   <Translations text="TestOptionLabel">
    <Translation language="fr">option (fr)</Translation>
    <Translation language="en">option (en)</Translation>
   </Translations>
   <Translations text="TestArgumentDescription">
    <Translation language="fr">argument de test.</Translation>
    <Translation language="en">test argument.</Translation>
   </Translations>
   <Translations text="TestArgumentLabel">
    <Translation language="fr">argument (fr)</Translation>
    <Translation language="en">argument (en)</Translation>
   </Translations>
  </Locale>
  <Arguments>
   <Argument id="TestCommand" Description="TestCommandDescription" long="test" short="t" Value="Test" Usage="%TestFlag% %TestOption% %TestArgument%"/>
   <Argument id="TestFlag" Description="TestFlagDescription" long="flag" short="f" Path="Flag" Value="TestFlag"/>
   <Argument id="TestOption" Description="TestOptionDescription" long="option" short="o" Path="Option" Label="TestOptionLabel"/>
   <Argument id="TestArgument" Description="TestArgumentDescription" Path="Test" Label="TestArgumentLabel"/>
   <Layouts>
    <Layout command="Test">
     <Link index="0" Target="TestArgument"/>
    </Layout>
   </Layouts>
  </Arguments>
 </Configuration>
</Configurations>
